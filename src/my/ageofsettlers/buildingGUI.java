/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package my.ageofsettlers;

/**
 *
 * @author Tim
 */
public class buildingGUI extends javax.swing.JFrame {

    /**
     * Creates new form buildingGUI
     */
    public buildingGUI() {
        this.board = BoardController.getInstance();
        this.playerCulture = board.getPlayerCulture();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        houseSelection = new javax.swing.JRadioButton();
        wallSelection = new javax.swing.JRadioButton();
        towerSelection = new javax.swing.JRadioButton();
        storehouseSelection = new javax.swing.JRadioButton();
        marketSelection = new javax.swing.JRadioButton();
        armorySelection = new javax.swing.JRadioButton();
        quarrySelection = new javax.swing.JRadioButton();
        monumentSelection = new javax.swing.JRadioButton();
        granarySelection = new javax.swing.JRadioButton();
        goldmintSelection = new javax.swing.JRadioButton();
        woodworkshopSelection = new javax.swing.JRadioButton();
        siegeworkshopSelection = new javax.swing.JRadioButton();
        greattempleSelection = new javax.swing.JRadioButton();
        wonderSelection = new javax.swing.JRadioButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(255,255,255,1));
        jTextField1.setText("Select a building to build:");
        jTextField1.setBorder(null);

        jButton1.setText("Build");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        buttonGroup2.add(houseSelection);
        houseSelection.setText("House");

        buttonGroup2.add(wallSelection);
        wallSelection.setText("Wall");

        buttonGroup2.add(towerSelection);
        towerSelection.setText("Tower");

        buttonGroup2.add(storehouseSelection);
        storehouseSelection.setText("Storehouse");

        buttonGroup2.add(marketSelection);
        marketSelection.setText("Market");

        buttonGroup2.add(armorySelection);
        armorySelection.setText("Armory");

        buttonGroup2.add(quarrySelection);
        quarrySelection.setText("Quarry");

        buttonGroup2.add(monumentSelection);
        monumentSelection.setText("Monument");

        buttonGroup2.add(granarySelection);
        granarySelection.setText("Granary");

        buttonGroup2.add(goldmintSelection);
        goldmintSelection.setText("Gold Mint");

        buttonGroup2.add(woodworkshopSelection);
        woodworkshopSelection.setText("Wood Workshop");

        buttonGroup2.add(siegeworkshopSelection);
        siegeworkshopSelection.setText("Siege Engine Workshop");

        buttonGroup2.add(greattempleSelection);
        greattempleSelection.setText("Great Temple");

        buttonGroup2.add(wonderSelection);
        wonderSelection.setText("The Wonder");

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(wallSelection)
                            .addComponent(houseSelection)
                            .addComponent(towerSelection)
                            .addComponent(storehouseSelection)
                            .addComponent(marketSelection)
                            .addComponent(armorySelection)
                            .addComponent(quarrySelection)
                            .addComponent(monumentSelection)
                            .addComponent(granarySelection)
                            .addComponent(goldmintSelection)
                            .addComponent(woodworkshopSelection)
                            .addComponent(siegeworkshopSelection)
                            .addComponent(greattempleSelection)
                            .addComponent(wonderSelection)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jButton1)
                        .addGap(31, 31, 31)
                        .addComponent(jButton2)))
                .addContainerGap(89, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(houseSelection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wallSelection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(towerSelection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(storehouseSelection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(marketSelection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(armorySelection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quarrySelection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(monumentSelection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(granarySelection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(goldmintSelection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(woodworkshopSelection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(siegeworkshopSelection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(greattempleSelection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wonderSelection)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        boolean buildBool = checkBuildingSelection(this.playerCulture);
        
        if(buildBool == true) {
            this.setVisible(false);
            board.initPlayPermCards();
        }
        else {
            buildingErrorGUI beGUI = new buildingErrorGUI();
            beGUI.setVisible(true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
        board.initPlayPermCards();
    }//GEN-LAST:event_jButton2ActionPerformed

    private boolean checkBuildingSelection(String culture) {
        if(houseSelection.isSelected() == true) {
            return checkResources(culture, "House.png", 2, 0, 2, 0);
        }
        else if(wallSelection.isSelected() == true) {
            return checkResources(culture, "Wall.png", 0, 0, 3, 3);
        }
        else if(towerSelection.isSelected() == true) {
            return checkResources(culture, "Tower.png", 0, 0, 3, 3);
        }
        else if(marketSelection.isSelected() == true) {
            return checkResources(culture, "Market.png", 0, 2, 0, 3);
        }
        else if(storehouseSelection.isSelected() == true) {
            return checkResources(culture, "Storehouse.png", 2,2,2,2);
        }
        else if(armorySelection.isSelected() == true) {
            return checkResources(culture, "Armory.png", 0, 0, 3, 2);
        }
        else if(quarrySelection.isSelected() == true) {
            return checkResources(culture, "Quarry.png", 4, 0, 0, 1);
        }
        else if(monumentSelection.isSelected() == true) {
            return checkResources(culture, "Monument.png", 3, 0, 0, 2);
        }
        else if(granarySelection.isSelected() == true) {
            return checkResources(culture, "Granary.png", 0, 0, 2, 3);
        }
        else if(woodworkshopSelection.isSelected() == true) {
            return checkResources(culture, "WoodWork.png", 2, 0, 0, 3);
        }
        else if(goldmintSelection.isSelected() == true) {
            return checkResources(culture, "GoldMint.png", 3, 0, 2, 0);
        }
        else if(siegeworkshopSelection.isSelected() == true) {
            return checkResources(culture, "SiegeWork.png", 0, 0, 3, 2);
        }
        else if(greattempleSelection.isSelected() == true) {
            return checkResources(culture, "GreatTemple.png", 4, 4, 4, 4);
        }
        else {
            return checkResources(culture, "Wonder.png", 10, 10, 10, 10);
        }
    }
    
    private boolean checkResources(String culture, String building, int food, int favor, int wood, int gold) {
        if(culture.compareTo("Norse") == 0) {
            Norse norsePlayer = Norse.getInstance();
            if(norsePlayer.getFood() < food) {
                return false;
            }
            if(norsePlayer.getFavor() < favor) {
                return false;
            }
            if(norsePlayer.getWood() < wood) {
                return false;
            }
            if(norsePlayer.getGold() < gold) {
                return false;
            }
            
            if(building.compareTo("House.png") == 0) {
                if(norsePlayer.getHouse() == 10) {
                    return false;
                }
                
                norsePlayer.setHouse(norsePlayer.getHouse() + 1);
            }
            else if(building.compareTo("Wall.png") == 0) {
                if(norsePlayer.isWall() == true) {
                    return false;
                }
                
                norsePlayer.setWall(true);
            }
            else if(building.compareTo("Tower.png") == 0) {
                if(norsePlayer.isTower() == true) {
                    return false;
                }
                
                norsePlayer.setTower(true);
            }
            else if(building.compareTo("Market.png") == 0) {
                if(norsePlayer.isMarket() == true) {
                    return false;
                }
                
                norsePlayer.setMarket(true);
            }
            else if(building.compareTo("Storehouse.png") == 0) {
                if(norsePlayer.isStorehouse() == true) {
                    return false;
                }
                
                norsePlayer.setStorehouse(true);
            }
            else if(building.compareTo("Armory.png") == 0) {
                if(norsePlayer.isArmory() == true) {
                    return false;
                }
                
                norsePlayer.setArmory(true);
            }
            else if(building.compareTo("Quarry.png") == 0) {
                if(norsePlayer.isQuarry() == true) {
                    return false;
                }
                
                norsePlayer.setQuarry(true);
            }
            else if(building.compareTo("Monument.png") == 0) {
                if(norsePlayer.isMonument() == true) {
                    return false;
                }
                
                norsePlayer.setMonument(true);
            }
            else if(building.compareTo("Granary.png") == 0) {
                if(norsePlayer.isGranary() == true) {
                    return false;
                }
                
                norsePlayer.setGranary(true);
            }
            else if(building.compareTo("WoodWork.png") == 0) {
                if(norsePlayer.isWoodworkshop() == true) {
                    return false;
                }
                
                norsePlayer.setWoodworkshop(true);
            }
            else if(building.compareTo("GoldMint.png") == 0) {
                if(norsePlayer.isGoldmint() == true) {
                    return false;
                }
                
                norsePlayer.setGoldmint(true);
            }
            else if(building.compareTo("SiegeWork.png") == 0) {
                if(norsePlayer.isSiegeworkshop() == true) {
                    return false;
                }
                
                norsePlayer.setSiegeworkshop(true);
            }
            else if(building.compareTo("GreatTemple.png") == 0) {
                if(norsePlayer.isGreattemple() == true) {
                    return false;
                }
                
                norsePlayer.setGreattemple(true);
            }
            else {
                if(norsePlayer.isWonder() == true) {
                    return false;
                }
                
                norsePlayer.setWonder(true);
            }
            
            norsePlayer.setFood(norsePlayer.getFood() - food);
            norsePlayer.setFavor(norsePlayer.getFavor() - favor);
            norsePlayer.setWood(norsePlayer.getWood() - wood);
            norsePlayer.setGold(norsePlayer.getGold() - gold);
            board.updateResources("Norse");
            board.buildBuilding(culture, building);
            return true;
        }
        else if(culture.compareTo("Greek") == 0) {
            Greek greekPlayer = Greek.getInstance();
            if(greekPlayer.getFood() < food) {
                return false;
            }
            if(greekPlayer.getFavor() < favor) {
                return false;
            }
            if(greekPlayer.getWood() < wood) {
                return false;
            }
            if(greekPlayer.getGold() < gold) {
                return false;
            }
            
            if(building.compareTo("House.png") == 0) {
                if(greekPlayer.getHouse() == 10) {
                    return false;
                }
                
                greekPlayer.setHouse(greekPlayer.getHouse() + 1);
            }
            else if(building.compareTo("Wall.png") == 0) {
                if(greekPlayer.isWall() == true) {
                    return false;
                }
                
                greekPlayer.setWall(true);
            }
            else if(building.compareTo("Tower.png") == 0) {
                if(greekPlayer.isTower() == true) {
                    return false;
                }
                
                greekPlayer.setTower(true);
            }
            else if(building.compareTo("Market.png") == 0) {
                if(greekPlayer.isMarket() == true) {
                    return false;
                }
                
                greekPlayer.setMarket(true);
            }
            else if(building.compareTo("Storehouse.png") == 0) {
                if(greekPlayer.isStorehouse() == true) {
                    return false;
                }
                
                greekPlayer.setStorehouse(true);
            }
            else if(building.compareTo("Armory.png") == 0) {
                if(greekPlayer.isArmory() == true) {
                    return false;
                }
                
                greekPlayer.setArmory(true);
            }
            else if(building.compareTo("Quarry.png") == 0) {
                if(greekPlayer.isQuarry() == true) {
                    return false;
                }
                
                greekPlayer.setQuarry(true);
            }
            else if(building.compareTo("Monument.png") == 0) {
                if(greekPlayer.isMonument() == true) {
                    return false;
                }
                
                greekPlayer.setMonument(true);
            }
            else if(building.compareTo("Granary.png") == 0) {
                if(greekPlayer.isGranary() == true) {
                    return false;
                }
                
                greekPlayer.setGranary(true);
            }
            else if(building.compareTo("WoodWork.png") == 0) {
                if(greekPlayer.isWoodworkshop() == true) {
                    return false;
                }
                
                greekPlayer.setWoodworkshop(true);
            }
            else if(building.compareTo("GoldMint.png") == 0) {
                if(greekPlayer.isGoldmint() == true) {
                    return false;
                }
                
                greekPlayer.setGoldmint(true);
            }
            else if(building.compareTo("SiegeWork.png") == 0) {
                if(greekPlayer.isSiegeworkshop() == true) {
                    return false;
                }
                
                greekPlayer.setSiegeworkshop(true);
            }
            else if(building.compareTo("GreatTemple.png") == 0) {
                if(greekPlayer.isGreattemple() == true) {
                    return false;
                }
                
                greekPlayer.setGreattemple(true);
            }
            else {
                if(greekPlayer.isWonder() == true) {
                    return false;
                }
                
                greekPlayer.setWonder(true);
            }
            
            greekPlayer.setFood(greekPlayer.getFood() - food);
            greekPlayer.setFavor(greekPlayer.getFavor() - favor);
            greekPlayer.setWood(greekPlayer.getWood() - wood);
            greekPlayer.setGold(greekPlayer.getGold() - gold);
            board.updateResources("Greek");
            board.buildBuilding(culture, building);
            return true;
        }
        else {
            Egyptian egyptianPlayer = Egyptian.getInstance();
            if(egyptianPlayer.getFood() < food) {
                return false;
            }
            if(egyptianPlayer.getFavor() < favor) {
                return false;
            }
            if(egyptianPlayer.getWood() < wood) {
                return false;
            }
            if(egyptianPlayer.getGold() < gold) {
                return false;
            }
            
            if(building.compareTo("House.png") == 0) {
                if(egyptianPlayer.getHouse() == 10) {
                    return false;
                }
                
                egyptianPlayer.setHouse(egyptianPlayer.getHouse() + 1);
            }
            else if(building.compareTo("Wall.png") == 0) {
                if(egyptianPlayer.isWall() == true) {
                    return false;
                }
                
                egyptianPlayer.setWall(true);
            }
            else if(building.compareTo("Tower.png") == 0) {
                if(egyptianPlayer.isTower() == true) {
                    return false;
                }
                
                egyptianPlayer.setTower(true);
            }
            else if(building.compareTo("Market.png") == 0) {
                if(egyptianPlayer.isMarket() == true) {
                    return false;
                }
                
                egyptianPlayer.setMarket(true);
            }
            else if(building.compareTo("Storehouse.png") == 0) {
                if(egyptianPlayer.isStorehouse() == true) {
                    return false;
                }
                
                egyptianPlayer.setStorehouse(true);
            }
            else if(building.compareTo("Armory.png") == 0) {
                if(egyptianPlayer.isArmory() == true) {
                    return false;
                }
                
                egyptianPlayer.setArmory(true);
            }
            else if(building.compareTo("Quarry.png") == 0) {
                if(egyptianPlayer.isQuarry() == true) {
                    return false;
                }
                
                egyptianPlayer.setQuarry(true);
            }
            else if(building.compareTo("Monument.png") == 0) {
                if(egyptianPlayer.isMonument() == true) {
                    return false;
                }
                
                egyptianPlayer.setMonument(true);
            }
            else if(building.compareTo("Granary.png") == 0) {
                if(egyptianPlayer.isGranary() == true) {
                    return false;
                }
                
                egyptianPlayer.setGranary(true);
            }
            else if(building.compareTo("WoodWork.png") == 0) {
                if(egyptianPlayer.isWoodworkshop() == true) {
                    return false;
                }
                
                egyptianPlayer.setWoodworkshop(true);
            }
            else if(building.compareTo("GoldMint.png") == 0) {
                if(egyptianPlayer.isGoldmint() == true) {
                    return false;
                }
                
                egyptianPlayer.setGoldmint(true);
            }
            else if(building.compareTo("SiegeWork.png") == 0) {
                if(egyptianPlayer.isSiegeworkshop() == true) {
                    return false;
                }
                
                egyptianPlayer.setSiegeworkshop(true);
            }
            else if(building.compareTo("GreatTemple.png") == 0) {
                if(egyptianPlayer.isGreattemple() == true) {
                    return false;
                }
                
                egyptianPlayer.setGreattemple(true);
            }
            else {
                if(egyptianPlayer.isWonder() == true) {
                    return false;
                }
                
                egyptianPlayer.setWonder(true);
            }
            
            egyptianPlayer.setFood(egyptianPlayer.getFood() - food);
            egyptianPlayer.setFavor(egyptianPlayer.getFavor() - favor);
            egyptianPlayer.setWood(egyptianPlayer.getWood() - wood);
            egyptianPlayer.setGold(egyptianPlayer.getGold() - gold);
            board.updateResources("Egyptian");
            board.buildBuilding(culture, building);
            return true;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(buildingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(buildingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(buildingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(buildingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new buildingGUI().setVisible(true);
            }
        });
    }

    private String playerCulture;
    private BoardController board;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton armorySelection;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton goldmintSelection;
    private javax.swing.JRadioButton granarySelection;
    private javax.swing.JRadioButton greattempleSelection;
    private javax.swing.JRadioButton houseSelection;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JRadioButton marketSelection;
    private javax.swing.JRadioButton monumentSelection;
    private javax.swing.JRadioButton quarrySelection;
    private javax.swing.JRadioButton siegeworkshopSelection;
    private javax.swing.JRadioButton storehouseSelection;
    private javax.swing.JRadioButton towerSelection;
    private javax.swing.JRadioButton wallSelection;
    private javax.swing.JRadioButton wonderSelection;
    private javax.swing.JRadioButton woodworkshopSelection;
    // End of variables declaration//GEN-END:variables
}

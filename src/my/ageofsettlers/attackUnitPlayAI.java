/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package my.ageofsettlers;

import java.awt.Component;
import java.util.List;
import java.util.Random;

/**
 *
 * @author Tim
 */
public class attackUnitPlayAI extends javax.swing.JFrame {

    /**
     * Creates new form attackUnitPlayGUI
     */
    public attackUnitPlayAI() {
        this.board = BoardController.getInstance();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

    }                                                          

    public void playAI(){                                         
        int cardIndex = getCardIndex();
        UnitCard playerCard;
        
        if(board.getPlayerCulture().compareTo("Norse") == 0) {
            Norse norsePlayer = Norse.getInstance();
            playerCard = norsePlayer.getTotalUnitList().get(cardIndex);
        }
        else if(board.getPlayerCulture().compareTo("Greek") == 0) {
            Greek greekPlayer = Greek.getInstance();
            playerCard = greekPlayer.getTotalUnitList().get(cardIndex);
        }
        else {
            Egyptian egyptianPlayer = Egyptian.getInstance();
            playerCard = egyptianPlayer.getTotalUnitList().get(cardIndex);
        }
        System.out.println(board.getPlayerCulture()+" - "+selectedUnits+" - "+playerCard+" - "+this.enemy+" -  "+this.attackingArea);
        board.commenceBattleAI(board.getPlayerCulture(), selectedUnits, playerCard, this.enemy, this.attackingArea);
    }                                        

    private int getCardIndex() {
        int cardIndex = 0;
        Random rand = new Random(System.nanoTime());
        cardIndex = rand.nextInt(5);
        
        return cardIndex;
    }

    public void setMaxCards(int maxCards) {
        this.maxCards = maxCards;
    }
    
    public void setEnemy(String enemy) {
        this.enemy = enemy;
    }

    public void setAttackingArea(String attackingArea) {
        this.attackingArea = attackingArea;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(attackUnitPlayGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(attackUnitPlayGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(attackUnitPlayGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(attackUnitPlayGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new attackUnitPlayGUI().setVisible(true);
            }
        });
    }

    List<UnitCard> selectedUnits;
    private String enemy;
    private int maxCards = 0;
    private BoardController board;
    private String attackingArea;
      // End of variables declaration                   
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package my.ageofsettlers;

/**
 *
 * @author Tim
 */
public class tradeGUI extends javax.swing.JFrame {

    /**
     * Creates new form tradeGUI
     */
    public tradeGUI() {
        this.bank = Bank.getInstance();
        this.board = BoardController.getInstance();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        playerText = new javax.swing.JTextField();
        playerFoodText = new javax.swing.JTextField();
        playerFoodSelection = new javax.swing.JComboBox();
        playerFavorText = new javax.swing.JTextField();
        playerFavorSelection = new javax.swing.JComboBox();
        playerWoodText = new javax.swing.JTextField();
        playerWoodSelection = new javax.swing.JComboBox();
        playerGoldText = new javax.swing.JTextField();
        playerGoldSelection = new javax.swing.JComboBox();
        bankText = new javax.swing.JTextField();
        bankFoodText = new javax.swing.JTextField();
        bankFoodSelection = new javax.swing.JComboBox();
        bankFavorText = new javax.swing.JTextField();
        bankFavorSelection = new javax.swing.JComboBox();
        bankWoodText = new javax.swing.JTextField();
        bankWoodSelection = new javax.swing.JComboBox();
        bankGoldText = new javax.swing.JTextField();
        bankGoldSelection = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        bankVictoryText = new javax.swing.JTextField();
        bankVictorySelection = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(255,255,255,1));
        jTextField1.setText("Select resources to trade with the bank:");
        jTextField1.setBorder(null);
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        playerText.setEditable(false);
        playerText.setBackground(new java.awt.Color(255,255,255,1));
        playerText.setText("Player:");
        playerText.setBorder(null);
        jPanel1.add(playerText, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, -1, -1));

        playerFoodText.setEditable(false);
        playerFoodText.setBackground(new java.awt.Color(255,255,255,1));
        playerFoodText.setText("Food:");
        playerFoodText.setBorder(null);
        jPanel1.add(playerFoodText, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, -1, -1));

        playerFoodSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(playerFoodSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, -1, -1));

        playerFavorText.setEditable(false);
        playerFavorText.setBackground(new java.awt.Color(255,255,255,1));
        playerFavorText.setText("Favor:");
        playerFavorText.setBorder(null);
        jPanel1.add(playerFavorText, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 70, -1, -1));

        playerFavorSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(playerFavorSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 70, -1, -1));

        playerWoodText.setEditable(false);
        playerWoodText.setBackground(new java.awt.Color(255,255,255,1));
        playerWoodText.setText("Wood:");
        playerWoodText.setBorder(null);
        jPanel1.add(playerWoodText, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 70, -1, -1));

        playerWoodSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(playerWoodSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 70, -1, -1));

        playerGoldText.setEditable(false);
        playerGoldText.setBackground(new java.awt.Color(255,255,255,1));
        playerGoldText.setText("Gold:");
        playerGoldText.setBorder(null);
        jPanel1.add(playerGoldText, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 70, -1, -1));

        playerGoldSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(playerGoldSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 70, -1, -1));

        bankText.setEditable(false);
        bankText.setBackground(new java.awt.Color(255,255,255,1));
        bankText.setText("Bank:");
        bankText.setBorder(null);
        jPanel1.add(bankText, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, -1, -1));

        bankFoodText.setEditable(false);
        bankFoodText.setBackground(new java.awt.Color(255,255,255,1));
        bankFoodText.setText("Food:");
        bankFoodText.setBorder(null);
        jPanel1.add(bankFoodText, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, -1, -1));

        bankFoodSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(bankFoodSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 190, -1, -1));

        bankFavorText.setEditable(false);
        bankFavorText.setBackground(new java.awt.Color(255,255,255,1));
        bankFavorText.setText("Favor:");
        bankFavorText.setBorder(null);
        jPanel1.add(bankFavorText, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 190, -1, -1));

        bankFavorSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(bankFavorSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 190, -1, -1));

        bankWoodText.setEditable(false);
        bankWoodText.setBackground(new java.awt.Color(255,255,255,1));
        bankWoodText.setText("Wood:");
        bankWoodText.setBorder(null);
        jPanel1.add(bankWoodText, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 190, -1, -1));

        bankWoodSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(bankWoodSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 190, -1, -1));

        bankGoldText.setEditable(false);
        bankGoldText.setBackground(new java.awt.Color(255,255,255,1));
        bankGoldText.setText("Gold:");
        bankGoldText.setBorder(null);
        jPanel1.add(bankGoldText, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 190, -1, -1));

        bankGoldSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(bankGoldSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 190, -1, -1));

        jButton1.setText("Trade");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 250, -1, -1));

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 250, -1, -1));

        bankVictoryText.setEditable(false);
        bankVictoryText.setBackground(new java.awt.Color(255,255,255,1));
        bankVictoryText.setText("Victory:");
        bankVictoryText.setBorder(null);
        jPanel1.add(bankVictoryText, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 190, -1, -1));

        bankVictorySelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(bankVictorySelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 190, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int playerFoodCount = Integer.parseInt((String)playerFoodSelection.getSelectedItem());
        int playerFavorCount = Integer.parseInt((String)playerFavorSelection.getSelectedItem());
        int playerWoodCount = Integer.parseInt((String)playerWoodSelection.getSelectedItem());
        int playerGoldCount = Integer.parseInt((String)playerGoldSelection.getSelectedItem());
        int bankFoodCount = Integer.parseInt((String)bankFoodSelection.getSelectedItem());
        int bankFavorCount = Integer.parseInt((String)bankFavorSelection.getSelectedItem());
        int bankWoodCount = Integer.parseInt((String)bankWoodSelection.getSelectedItem());
        int bankGoldCount = Integer.parseInt((String)bankGoldSelection.getSelectedItem());
        int bankVictoryCount = Integer.parseInt((String)bankVictorySelection.getSelectedItem());
        boolean victoryTradeFail = false;
        
        if(this.playerCulture.compareTo("Norse") == 0) {
            Norse norsePlayer = Norse.getInstance();
            if(bankVictoryCount > 0) {
                if(playerFavorCount <= bankVictoryCount*8 || norsePlayer.isGreattemple() == false) {
                    victoryTradeFail = true;
                }
                else {
                    norsePlayer.setFavor(norsePlayer.getFavor() - bankVictoryCount*8);
                    norsePlayer.setVictory(norsePlayer.getVictory() + bankVictoryCount);
                    playerFavorCount -= bankVictoryCount*8;
                    victoryTradeFail = false;
                }
            }
            else {
                victoryTradeFail = false;
            }
        }
        else if(this.playerCulture.compareTo("Greek") == 0) {
            Greek greekPlayer = Greek.getInstance();
            if(bankVictoryCount > 0) {
                if(playerFavorCount != bankVictoryCount*8 || greekPlayer.isGreattemple() == false) {
                    victoryTradeFail = true;
                }
                else {
                    greekPlayer.setFavor(greekPlayer.getFavor() - bankVictoryCount*8);
                    greekPlayer.setVictory(greekPlayer.getVictory() + bankVictoryCount);
                    playerFavorCount -= bankVictoryCount*8;
                    victoryTradeFail = false;
                }
            }
            else {
                victoryTradeFail = false;
            }
        }
        else {
            Egyptian egyptianPlayer = Egyptian.getInstance();
            if(bankVictoryCount > 0) {
                if(playerFavorCount != bankVictoryCount*8 || egyptianPlayer.isGreattemple() == false) {
                    victoryTradeFail = true;
                }
                else {
                    egyptianPlayer.setFavor(egyptianPlayer.getFavor() - bankVictoryCount*8);
                    egyptianPlayer.setVictory(egyptianPlayer.getVictory() + bankVictoryCount);
                    playerFavorCount -= bankVictoryCount*8;
                    victoryTradeFail = false;
                }
            }
            else {
                victoryTradeFail = false;
            }
        }
        
        
        int sum1 = playerFoodCount + playerFavorCount + playerWoodCount + playerGoldCount;
        int sum2 = bankFoodCount + bankFavorCount + bankWoodCount + bankGoldCount;

        if(sum1 == sum2 && victoryTradeFail == false) {
            if(this.playerCulture.compareTo("Norse") == 0) {
                Norse norsePlayer = Norse.getInstance();
                norsePlayer.setFood(norsePlayer.getFood() - playerFoodCount + bankFoodCount);
                norsePlayer.setFavor(norsePlayer.getFavor() - playerFavorCount + bankFavorCount);
                norsePlayer.setWood(norsePlayer.getWood() - playerWoodCount + bankWoodCount);
                norsePlayer.setGold(norsePlayer.getGold() - playerGoldCount + bankGoldCount);
            }
            else if(this.playerCulture.compareTo("Greek") == 0) {
                Greek greekPlayer = Greek.getInstance();
                greekPlayer.setFood(greekPlayer.getFood() - playerFoodCount + bankFoodCount);
                greekPlayer.setFavor(greekPlayer.getFavor() - playerFavorCount + bankFavorCount);
                greekPlayer.setWood(greekPlayer.getWood() - playerWoodCount + bankWoodCount);
                greekPlayer.setGold(greekPlayer.getGold() - playerGoldCount + bankGoldCount);
            }
            else {
                Egyptian egyptianPlayer = Egyptian.getInstance();
                egyptianPlayer.setFood(egyptianPlayer.getFood() - playerFoodCount + bankFoodCount);
                egyptianPlayer.setFavor(egyptianPlayer.getFavor() - playerFavorCount + bankFavorCount);
                egyptianPlayer.setWood(egyptianPlayer.getWood() - playerWoodCount + bankWoodCount);
                egyptianPlayer.setGold(egyptianPlayer.getGold() - playerGoldCount + bankGoldCount);
            }
            
            bank.setFood(bank.getFood() + playerFoodCount - bankFoodCount);
            bank.setFavor(bank.getFavor() + playerFavorCount - bankFavorCount);
            bank.setWood(bank.getWood() + playerWoodCount - bankWoodCount);
            bank.setGold(bank.getGold() + playerGoldCount - bankGoldCount);
            board.updateResources(this.playerCulture);
            this.setVisible(false);
            //board.initPlayPermCards();
            board.configureTurnFormation(board.getCurrentPlayerTurn()+1);
        }
        else {
            tradeErrorGUI teGUI = new tradeErrorGUI();
            teGUI.setVisible(true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
        //board.initPlayPermCards();
        board.configureTurnFormation(board.getCurrentPlayerTurn()+1);
    }//GEN-LAST:event_jButton2ActionPerformed

    public void setupTradeGUI(String culture) {
        String[] foodCount;
        String[] favorCount;
        String[] woodCount;
        String[] goldCount;
        this.playerCulture = culture;
        
        if(culture.compareTo("Norse") == 0) {
            Norse norsePlayer = Norse.getInstance();
            foodCount = new String[norsePlayer.getFood()+1];
            favorCount = new String[norsePlayer.getFavor()+1];
            woodCount = new String[norsePlayer.getWood()+1];
            goldCount = new String[norsePlayer.getGold()+1];
        }
        else if(culture.compareTo("Greek") == 0) {
            Greek greekPlayer = Greek.getInstance();
            foodCount = new String[greekPlayer.getFood()+1];
            favorCount = new String[greekPlayer.getFavor()+1];
            woodCount = new String[greekPlayer.getWood()+1];
            goldCount = new String[greekPlayer.getGold()+1];
        }
        else {
            Egyptian egyptianPlayer = Egyptian.getInstance();
            foodCount = new String[egyptianPlayer.getFood()+1];
            favorCount = new String[egyptianPlayer.getFavor()+1];
            woodCount = new String[egyptianPlayer.getWood()+1];
            goldCount = new String[egyptianPlayer.getGold()+1];
        }
        
        for(int i = 0; i < foodCount.length; i++) {
            foodCount[i] = String.valueOf(i);
        }
        playerFoodSelection.setModel(new javax.swing.DefaultComboBoxModel(foodCount));
        for(int i = 0; i < favorCount.length; i++) {
            favorCount[i] = String.valueOf(i);
        }
        playerFavorSelection.setModel(new javax.swing.DefaultComboBoxModel(favorCount));
        for(int i = 0; i < woodCount.length; i++) {
            woodCount[i] = String.valueOf(i);
        }
        playerWoodSelection.setModel(new javax.swing.DefaultComboBoxModel(woodCount));
        for(int i = 0; i < goldCount.length; i++) {
           goldCount[i] = String.valueOf(i);
        }
        playerGoldSelection.setModel(new javax.swing.DefaultComboBoxModel(goldCount));
        
        foodCount = new String[bank.getFood()+1];
        favorCount = new String[bank.getFavor()+1];
        woodCount = new String[bank.getWood()+1];
        goldCount = new String[bank.getFavor()+1];
        String[] victoryCount = new String[bank.getVictory() + 1];
                
        for(int i = 0; i < foodCount.length; i++) {
            foodCount[i] = String.valueOf(i);
        }
        bankFoodSelection.setModel(new javax.swing.DefaultComboBoxModel(foodCount));
        for(int i = 0; i < favorCount.length; i++) {
            favorCount[i] = String.valueOf(i);
        }
        bankFavorSelection.setModel(new javax.swing.DefaultComboBoxModel(favorCount));
        for(int i = 0; i < woodCount.length; i++) {
            woodCount[i] = String.valueOf(i);
        }
        bankWoodSelection.setModel(new javax.swing.DefaultComboBoxModel(woodCount));
        for(int i = 0; i < goldCount.length; i++) {
           goldCount[i] = String.valueOf(i);
        }
        bankGoldSelection.setModel(new javax.swing.DefaultComboBoxModel(goldCount));
        for(int i = 0; i < victoryCount.length; i++) {
           victoryCount[i] = String.valueOf(i);
        }
        bankVictorySelection.setModel(new javax.swing.DefaultComboBoxModel(victoryCount));
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tradeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tradeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tradeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tradeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new tradeGUI().setVisible(true);
            }
        });
    }

    private String playerCulture;
    private BoardController board;
    private Bank bank;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox bankFavorSelection;
    private javax.swing.JTextField bankFavorText;
    private javax.swing.JComboBox bankFoodSelection;
    private javax.swing.JTextField bankFoodText;
    private javax.swing.JComboBox bankGoldSelection;
    private javax.swing.JTextField bankGoldText;
    private javax.swing.JTextField bankText;
    private javax.swing.JComboBox bankVictorySelection;
    private javax.swing.JTextField bankVictoryText;
    private javax.swing.JComboBox bankWoodSelection;
    private javax.swing.JTextField bankWoodText;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox playerFavorSelection;
    private javax.swing.JTextField playerFavorText;
    private javax.swing.JComboBox playerFoodSelection;
    private javax.swing.JTextField playerFoodText;
    private javax.swing.JComboBox playerGoldSelection;
    private javax.swing.JTextField playerGoldText;
    private javax.swing.JTextField playerText;
    private javax.swing.JComboBox playerWoodSelection;
    private javax.swing.JTextField playerWoodText;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package my.ageofsettlers;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 *
 * @author Tim
 */
public class attackCityAreaAI{

    /**
     * Creates new form attackCityAreaGUI
     */
    public attackCityAreaAI() {
        this.board = BoardController.getInstance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
// </editor-fold>                                                               

    public void playAI() {                                         
        List<String> selectedBuildings = new ArrayList<>();
        Random rand = new Random(System.nanoTime());
        int build = rand.nextInt(14);

        if(build == 0) {
            selectedBuildings.add("Armory.png");
        }
        if(build == 1) {
            selectedBuildings.add("GoldMint.png");
        }
        if(build == 2) {
            selectedBuildings.add("Granary.png");
        }
        if(build == 3) {
            selectedBuildings.add("GreatTemple.png");
        }
        if(build == 4) {
            selectedBuildings.add("House.png");
        }
        if(build == 5) {
            selectedBuildings.add("Market.png");
        }
        if(build == 6) {
            selectedBuildings.add("Monument.png");
        }
        if(build == 7) {
            selectedBuildings.add("Quarry.png");
        }
        if(build == 8) {
            selectedBuildings.add("SiegeWork.png");
        }
        if(build == 9) {
            selectedBuildings.add("Storehouse.png");
        }
        if(build == 10) {
            selectedBuildings.add("Tower.png");
        }
        if(build == 11) {
            selectedBuildings.add("Wall.png");
        }
        if(build == 12) {
            selectedBuildings.add("Wonder.png");
        }
        if(build == 13) {
            selectedBuildings.add("WoodWork.png");
        }
        
        if(selectedBuildings.size() <= maxBuildings) {
            board.removeBuildingTiles(defender, selectedBuildings);
            //board.initPlayPermCards();
            board.configureTurnFormation(board.getCurrentPlayerTurn()+1);
        }
    }                                        

    public void setupCityAreaGUI(String defender, int maxBuildings) {
        this.defender = defender;
        this.maxBuildings = maxBuildings;
                
        if(defender.compareTo("Norse") == 0) {
            Norse norsePlayer = Norse.getInstance();
            if(norsePlayer.getHouse() == 0) {
                HouseBox.setEnabled(false);
            }
            if(norsePlayer.isArmory() == false) {
                ArmoryBox.setEnabled(false);
            }
            if(norsePlayer.isGoldmint() == false) {
                GoldMintBox.setEnabled(false);
            }
            if(norsePlayer.isGranary() == false) {
                GranaryBox.setEnabled(false);
            }
            if(norsePlayer.isGreattemple() == false) {
                GreatTempleBox.setEnabled(false);
            }
            if(norsePlayer.isMarket() == false) {
                MarketBox.setEnabled(false);
            }
            if(norsePlayer.isMonument() == false) {
                MonumentBox.setEnabled(false);
            }
            if(norsePlayer.isQuarry() == false) {
                QuarryBox.setEnabled(false);
            }
            if(norsePlayer.isSiegeworkshop() == false) {
                SiegeEngineBox.setEnabled(false);
            }
            if(norsePlayer.isStorehouse() == false) {
                StorehouseBox.setEnabled(false);
            }
            if(norsePlayer.isTower() == false) {
                TowerBox.setEnabled(false);
            }
            if(norsePlayer.isWall() == false) {
                WallBox.setEnabled(false);
            }
            if(norsePlayer.isWonder() == false) {
                WonderBox.setEnabled(false);
            }
            if(norsePlayer.isWoodworkshop() == false) {
                WoodworkshopBox.setEnabled(false);
            }
        }
        else if(defender.compareTo("Greek") == 0) {
            Greek greekPlayer = Greek.getInstance();
            if(greekPlayer.getHouse() == 0) {
                HouseBox.setEnabled(false);
            }
            if(greekPlayer.isArmory() == false) {
                ArmoryBox.setEnabled(false);
            }
            if(greekPlayer.isGoldmint() == false) {
                GoldMintBox.setEnabled(false);
            }
            if(greekPlayer.isGranary() == false) {
                GranaryBox.setEnabled(false);
            }
            if(greekPlayer.isGreattemple() == false) {
                GreatTempleBox.setEnabled(false);
            }
            if(greekPlayer.isMarket() == false) {
                MarketBox.setEnabled(false);
            }
            if(greekPlayer.isMonument() == false) {
                MonumentBox.setEnabled(false);
            }
            if(greekPlayer.isQuarry() == false) {
                QuarryBox.setEnabled(false);
            }
            if(greekPlayer.isSiegeworkshop() == false) {
                SiegeEngineBox.setEnabled(false);
            }
            if(greekPlayer.isStorehouse() == false) {
                StorehouseBox.setEnabled(false);
            }
            if(greekPlayer.isTower() == false) {
                TowerBox.setEnabled(false);
            }
            if(greekPlayer.isWall() == false) {
                WallBox.setEnabled(false);
            }
            if(greekPlayer.isWonder() == false) {
                WonderBox.setEnabled(false);
            }
            if(greekPlayer.isWoodworkshop() == false) {
                WoodworkshopBox.setEnabled(false);
            }
        }
        else {
            Egyptian egyptianPlayer = Egyptian.getInstance();
            if(egyptianPlayer.getHouse() == 0) {
                HouseBox.setEnabled(false);
            }
            if(egyptianPlayer.isArmory() == false) {
                ArmoryBox.setEnabled(false);
            }
            if(egyptianPlayer.isGoldmint() == false) {
                GoldMintBox.setEnabled(false);
            }
            if(egyptianPlayer.isGranary() == false) {
                GranaryBox.setEnabled(false);
            }
            if(egyptianPlayer.isGreattemple() == false) {
                GreatTempleBox.setEnabled(false);
            }
            if(egyptianPlayer.isMarket() == false) {
                MarketBox.setEnabled(false);
            }
            if(egyptianPlayer.isMonument() == false) {
                MonumentBox.setEnabled(false);
            }
            if(egyptianPlayer.isQuarry() == false) {
                QuarryBox.setEnabled(false);
            }
            if(egyptianPlayer.isSiegeworkshop() == false) {
                SiegeEngineBox.setEnabled(false);
            }
            if(egyptianPlayer.isStorehouse() == false) {
                StorehouseBox.setEnabled(false);
            }
            if(egyptianPlayer.isTower() == false) {
                TowerBox.setEnabled(false);
            }
            if(egyptianPlayer.isWall() == false) {
                WallBox.setEnabled(false);
            }
            if(egyptianPlayer.isWonder() == false) {
                WonderBox.setEnabled(false);
            }
            if(egyptianPlayer.isWoodworkshop() == false) {
                WoodworkshopBox.setEnabled(false);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(attackCityAreaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(attackCityAreaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(attackCityAreaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(attackCityAreaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }

    private int maxBuildings;
    private String defender;
    private BoardController board;
    // Variables declaration - do not modify                     
    private javax.swing.JCheckBox ArmoryBox;
    private javax.swing.JCheckBox GoldMintBox;
    private javax.swing.JCheckBox GranaryBox;
    private javax.swing.JCheckBox GreatTempleBox;
    private javax.swing.JCheckBox HouseBox;
    private javax.swing.JCheckBox MarketBox;
    private javax.swing.JCheckBox MonumentBox;
    private javax.swing.JCheckBox QuarryBox;
    private javax.swing.JCheckBox SiegeEngineBox;
    private javax.swing.JCheckBox StorehouseBox;
    private javax.swing.JCheckBox TowerBox;
    private javax.swing.JCheckBox WallBox;
    private javax.swing.JCheckBox WonderBox;
    private javax.swing.JCheckBox WoodworkshopBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration                   
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.ageofsettlers;

/**
 *
 * @author SailendraBharadwaj
 */
public class QuarryGUI extends javax.swing.JFrame {

    /**
     * Creates new form QuarryGUI
     */
    public QuarryGUI() {
        this.board = BoardController.getInstance();
        this.playerCulture = board.getPlayerCulture();
        initComponents();
    }
    private BoardController board;
    private String playerCulture;
    private String culture;
    private String building;
    private int food;
    private int favor;
    private int wood;
    private int gold;
    boolean resource;
    public void resourceQuarry(String culture, String building, int food, int favor, int wood, int gold)
    {
       this.culture = culture;
       this.building = building;
       this.food = food;
       this.favor = favor;
       this.wood = wood;
       this.gold = gold;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Food");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Gold");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Wood");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Favor");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(37, 37, 37)
                .addComponent(jButton2)
                .addGap(32, 32, 32)
                .addComponent(jButton3)
                .addGap(37, 37, 37)
                .addComponent(jButton4)
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(181, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       if(food > 0)
           food--;
        boolean build = checkResources(culture, building, food, favor, wood, gold);
        if(build == true) {
            this.setVisible(false);
            board.initPlayPermCards();
        }
        else {
            buildingErrorGUI beGUI = new buildingErrorGUI();
            beGUI.setVisible(true);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(gold > 0)
            gold--;
        boolean build = checkResources(culture, building, food, favor, wood, gold);
        if(build == true) {
            this.setVisible(false);
            board.initPlayPermCards();
        }
        else {
            buildingErrorGUI beGUI = new buildingErrorGUI();
            beGUI.setVisible(true);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(wood >0)
            wood--;
        boolean build = checkResources(culture, building, food, favor, wood, gold); 
        if(build == true) {
            this.setVisible(false);
            board.initPlayPermCards();
        }
        else {
            buildingErrorGUI beGUI = new buildingErrorGUI();
            beGUI.setVisible(true);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if(favor >0)
            favor--;
        boolean build = checkResources(culture, building, food, favor, wood, gold);        
        if(build == true) {
            this.setVisible(false);
            board.initPlayPermCards();
        }
        else {
            buildingErrorGUI beGUI = new buildingErrorGUI();
            beGUI.setVisible(true);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private boolean checkResources(String culture, String building, int food, int favor, int wood, int gold) {                

        if(culture.compareTo("Norse") == 0) {
            Norse norsePlayer = Norse.getInstance();
            if(norsePlayer.getFood() < food) {
                return false;
            }
            if(norsePlayer.getFavor() < favor) {
                return false;
            }
            if(norsePlayer.getWood() < wood) {
                return false;
            }
            if(norsePlayer.getGold() < gold) {
                return false;
            }
            
            if(building.compareTo("House.png") == 0) {
                if(norsePlayer.getHouse() == 10) {
                    return false;
                }
                
                norsePlayer.setHouse(norsePlayer.getHouse() + 1);
            }
            else if(building.compareTo("Wall.png") == 0) {
                if(norsePlayer.isWall() == true) {
                    return false;
                }
                
                norsePlayer.setWall(true);
            }
            else if(building.compareTo("Tower.png") == 0) {
                if(norsePlayer.isTower() == true) {
                    return false;
                }
                
                norsePlayer.setTower(true);
            }
            else if(building.compareTo("Market.png") == 0) {
                if(norsePlayer.isMarket() == true) {
                    return false;
                }
                
                norsePlayer.setMarket(true);
            }
            else if(building.compareTo("Storehouse.png") == 0) {
                if(norsePlayer.isStorehouse() == true) {
                    return false;
                }
                
                norsePlayer.setStorehouse(true);
            }
            else if(building.compareTo("Armory.png") == 0) {
                if(norsePlayer.isArmory() == true) {
                    return false;
                }
                
                norsePlayer.setArmory(true);
            }
            else if(building.compareTo("Quarry.png") == 0) {
                if(norsePlayer.isQuarry() == true) {
                    return false;
                }
                
                norsePlayer.setQuarry(true);
            }
            else if(building.compareTo("Monument.png") == 0) {
                if(norsePlayer.isMonument() == true) {
                    return false;
                }
                
                norsePlayer.setMonument(true);
            }
            else if(building.compareTo("Granary.png") == 0) {
                if(norsePlayer.isGranary() == true) {
                    return false;
                }
                
                norsePlayer.setGranary(true);
            }
            else if(building.compareTo("WoodWork.png") == 0) {
                if(norsePlayer.isWoodworkshop() == true) {
                    return false;
                }
                
                norsePlayer.setWoodworkshop(true);
            }
            else if(building.compareTo("GoldMint.png") == 0) {
                if(norsePlayer.isGoldmint() == true) {
                    return false;
                }
                
                norsePlayer.setGoldmint(true);
            }
            else if(building.compareTo("SiegeWork.png") == 0) {
                if(norsePlayer.isSiegeworkshop() == true) {
                    return false;
                }
                
                norsePlayer.setSiegeworkshop(true);
            }
            else if(building.compareTo("GreatTemple.png") == 0) {
                if(norsePlayer.isGreattemple() == true) {
                    return false;
                }
                
                norsePlayer.setGreattemple(true);
            }
            else {
                if(norsePlayer.isWonder() == true && norsePlayer.getAge() != 3) {
                    return false;
                    //go to end game
                }
                
                norsePlayer.setWonder(true);
            }
            
            norsePlayer.setFood(norsePlayer.getFood() - food);
            norsePlayer.setFavor(norsePlayer.getFavor() - favor);
            norsePlayer.setWood(norsePlayer.getWood() - wood);
            norsePlayer.setGold(norsePlayer.getGold() - gold);
            board.updateResources("Norse");
            board.buildBuilding(culture, building);
            return true;
        }
        else if(culture.compareTo("Greek") == 0) {
            Greek greekPlayer = Greek.getInstance();
            if(greekPlayer.getFood() < food) {
                return false;
            }
            if(greekPlayer.getFavor() < favor) {
                return false;
            }
            if(greekPlayer.getWood() < wood) {
                return false;
            }
            if(greekPlayer.getGold() < gold) {
                return false;
            }
            
            if(building.compareTo("House.png") == 0) {
                if(greekPlayer.getHouse() == 10) {
                    return false;
                }
                
                greekPlayer.setHouse(greekPlayer.getHouse() + 1);
            }
            else if(building.compareTo("Wall.png") == 0) {
                if(greekPlayer.isWall() == true) {
                    return false;
                }
                
                greekPlayer.setWall(true);
            }
            else if(building.compareTo("Tower.png") == 0) {
                if(greekPlayer.isTower() == true) {
                    return false;
                }
                
                greekPlayer.setTower(true);
            }
            else if(building.compareTo("Market.png") == 0) {
                if(greekPlayer.isMarket() == true) {
                    return false;
                }
                
                greekPlayer.setMarket(true);
            }
            else if(building.compareTo("Storehouse.png") == 0) {
                if(greekPlayer.isStorehouse() == true) {
                    return false;
                }
                
                greekPlayer.setStorehouse(true);
            }
            else if(building.compareTo("Armory.png") == 0) {
                if(greekPlayer.isArmory() == true) {
                    return false;
                }
                
                greekPlayer.setArmory(true);
            }
            else if(building.compareTo("Quarry.png") == 0) {
                if(greekPlayer.isQuarry() == true) {
                    return false;
                }
                
                greekPlayer.setQuarry(true);
            }
            else if(building.compareTo("Monument.png") == 0) {
                if(greekPlayer.isMonument() == true) {
                    return false;
                }
                
                greekPlayer.setMonument(true);
            }
            else if(building.compareTo("Granary.png") == 0) {
                if(greekPlayer.isGranary() == true) {
                    return false;
                }
                
                greekPlayer.setGranary(true);
            }
            else if(building.compareTo("WoodWork.png") == 0) {
                if(greekPlayer.isWoodworkshop() == true) {
                    return false;
                }
                
                greekPlayer.setWoodworkshop(true);
            }
            else if(building.compareTo("GoldMint.png") == 0) {
                if(greekPlayer.isGoldmint() == true) {
                    return false;
                }
                
                greekPlayer.setGoldmint(true);
            }
            else if(building.compareTo("SiegeWork.png") == 0) {
                if(greekPlayer.isSiegeworkshop() == true) {
                    return false;
                }
                
                greekPlayer.setSiegeworkshop(true);
            }
            else if(building.compareTo("GreatTemple.png") == 0) {
                if(greekPlayer.isGreattemple() == true) {
                    return false;
                }
                
                greekPlayer.setGreattemple(true);
            }
            else {
                if(greekPlayer.isWonder() == true && greekPlayer.getAge() != 3) {
                    return false;
                    //go to end game
                }
                
                greekPlayer.setWonder(true);
            }
            
            greekPlayer.setFood(greekPlayer.getFood() - food);
            greekPlayer.setFavor(greekPlayer.getFavor() - favor);
            greekPlayer.setWood(greekPlayer.getWood() - wood);
            greekPlayer.setGold(greekPlayer.getGold() - gold);
            board.updateResources("Greek");
            board.buildBuilding(culture, building);
            return true;
        }
        else {
            Egyptian egyptianPlayer = Egyptian.getInstance();
            if(egyptianPlayer.getFood() < food) {
                return false;
            }
            if(egyptianPlayer.getFavor() < favor) {
                return false;
            }
            if(egyptianPlayer.getWood() < wood) {
                return false;
            }
            if(egyptianPlayer.getGold() < gold) {
                return false;
            }
            
            if(building.compareTo("House.png") == 0) {
                if(egyptianPlayer.getHouse() == 10) {
                    return false;
                }
                
                egyptianPlayer.setHouse(egyptianPlayer.getHouse() + 1);
            }
            else if(building.compareTo("Wall.png") == 0) {
                if(egyptianPlayer.isWall() == true) {
                    return false;
                }
                
                egyptianPlayer.setWall(true);
            }
            else if(building.compareTo("Tower.png") == 0) {
                if(egyptianPlayer.isTower() == true) {
                    return false;
                }
                
                egyptianPlayer.setTower(true);
            }
            else if(building.compareTo("Market.png") == 0) {
                if(egyptianPlayer.isMarket() == true) {
                    return false;
                }
                
                egyptianPlayer.setMarket(true);
            }
            else if(building.compareTo("Storehouse.png") == 0) {
                if(egyptianPlayer.isStorehouse() == true) {
                    return false;
                }
                
                egyptianPlayer.setStorehouse(true);
            }
            else if(building.compareTo("Armory.png") == 0) {
                if(egyptianPlayer.isArmory() == true) {
                    return false;
                }
                
                egyptianPlayer.setArmory(true);
            }
            else if(building.compareTo("Quarry.png") == 0) {
                if(egyptianPlayer.isQuarry() == true) {
                    return false;
                }
                
                egyptianPlayer.setQuarry(true);
            }
            else if(building.compareTo("Monument.png") == 0) {
                if(egyptianPlayer.isMonument() == true) {
                    return false;
                }
                
                egyptianPlayer.setMonument(true);
            }
            else if(building.compareTo("Granary.png") == 0) {
                if(egyptianPlayer.isGranary() == true) {
                    return false;
                }
                
                egyptianPlayer.setGranary(true);
            }
            else if(building.compareTo("WoodWork.png") == 0) {
                if(egyptianPlayer.isWoodworkshop() == true) {
                    return false;
                }
                
                egyptianPlayer.setWoodworkshop(true);
            }
            else if(building.compareTo("GoldMint.png") == 0) {
                if(egyptianPlayer.isGoldmint() == true) {
                    return false;
                }
                
                egyptianPlayer.setGoldmint(true);
            }
            else if(building.compareTo("SiegeWork.png") == 0) {
                if(egyptianPlayer.isSiegeworkshop() == true) {
                    return false;
                }
                
                egyptianPlayer.setSiegeworkshop(true);
            }
            else if(building.compareTo("GreatTemple.png") == 0) {
                if(egyptianPlayer.isGreattemple() == true) {
                    return false;
                }
                
                egyptianPlayer.setGreattemple(true);
            }
            else {
                if(egyptianPlayer.isWonder() == true && egyptianPlayer.getAge() != 3) {
                    return false;
                }
                
                egyptianPlayer.setWonder(true);
                //go to end game
            }
            
            egyptianPlayer.setFood(egyptianPlayer.getFood() - food);
            egyptianPlayer.setFavor(egyptianPlayer.getFavor() - favor);
            egyptianPlayer.setWood(egyptianPlayer.getWood() - wood);
            egyptianPlayer.setGold(egyptianPlayer.getGold() - gold);
            board.updateResources("Egyptian");
            board.buildBuilding(culture, building);
            return true;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuarryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuarryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuarryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuarryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuarryGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package my.ageofsettlers;

import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Tim
 */
public class attackCityAreaGUI extends javax.swing.JFrame {

    /**
     * Creates new form attackCityAreaGUI
     */
    public attackCityAreaGUI() {
        this.board = BoardController.getInstance();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        HouseBox = new javax.swing.JCheckBox();
        WallBox = new javax.swing.JCheckBox();
        TowerBox = new javax.swing.JCheckBox();
        StorehouseBox = new javax.swing.JCheckBox();
        MarketBox = new javax.swing.JCheckBox();
        ArmoryBox = new javax.swing.JCheckBox();
        QuarryBox = new javax.swing.JCheckBox();
        MonumentBox = new javax.swing.JCheckBox();
        GranaryBox = new javax.swing.JCheckBox();
        GoldMintBox = new javax.swing.JCheckBox();
        WoodworkshopBox = new javax.swing.JCheckBox();
        SiegeEngineBox = new javax.swing.JCheckBox();
        GreatTempleBox = new javax.swing.JCheckBox();
        WonderBox = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(255,255,255,1));
        jTextField1.setText("Select x buildings to destroy:");
        jTextField1.setBorder(null);

        HouseBox.setText("House");

        WallBox.setText("Wall");

        TowerBox.setText("Tower");

        StorehouseBox.setText("Storehouse");

        MarketBox.setText("Market");

        ArmoryBox.setText("Armory");

        QuarryBox.setText("Quarry");

        MonumentBox.setText("Monument");

        GranaryBox.setText("Granary");

        GoldMintBox.setText("Gold Mint");

        WoodworkshopBox.setText("Wood Workshop");

        SiegeEngineBox.setText("Siege Engine Workshop");

        GreatTempleBox.setText("Great Temple");

        WonderBox.setText("Wonder");

        jButton1.setText("Confirm");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(WallBox)
                            .addComponent(HouseBox)
                            .addComponent(TowerBox)
                            .addComponent(StorehouseBox)
                            .addComponent(MarketBox)
                            .addComponent(ArmoryBox)
                            .addComponent(QuarryBox)
                            .addComponent(MonumentBox)
                            .addComponent(GranaryBox)
                            .addComponent(GoldMintBox)
                            .addComponent(WoodworkshopBox)
                            .addComponent(SiegeEngineBox)
                            .addComponent(GreatTempleBox)
                            .addComponent(WonderBox)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(HouseBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(WallBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TowerBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(StorehouseBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MarketBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ArmoryBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(QuarryBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MonumentBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GranaryBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GoldMintBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(WoodworkshopBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SiegeEngineBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GreatTempleBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(WonderBox)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(0, 21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
        board.initPlayPermCards();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        List<String> selectedBuildings = new ArrayList<>();
        
        if(ArmoryBox.isSelected()) {
            selectedBuildings.add("Armory.png");
        }
        if(GoldMintBox.isSelected()) {
            selectedBuildings.add("GoldMint.png");
        }
        if(GranaryBox.isSelected()) {
            selectedBuildings.add("Granary.png");
        }
        if(GreatTempleBox.isSelected()) {
            selectedBuildings.add("GreatTemple.png");
        }
        if(HouseBox.isSelected()) {
            selectedBuildings.add("House.png");
        }
        if(MarketBox.isSelected()) {
            selectedBuildings.add("Market.png");
        }
        if(MonumentBox.isSelected()) {
            selectedBuildings.add("Monument.png");
        }
        if(QuarryBox.isSelected()) {
            selectedBuildings.add("Quarry.png");
        }
        if(SiegeEngineBox.isSelected()) {
            selectedBuildings.add("SiegeWork.png");
        }
        if(StorehouseBox.isSelected()) {
            selectedBuildings.add("Storehouse.png");
        }
        if(TowerBox.isSelected()) {
            selectedBuildings.add("Tower.png");
        }
        if(WallBox.isSelected()) {
            selectedBuildings.add("Wall.png");
        }
        if(WonderBox.isSelected()) {
            selectedBuildings.add("Wonder.png");
        }
        if(WoodworkshopBox.isSelected()) {
            selectedBuildings.add("WoodWork.png");
        }
        
        if(selectedBuildings.size() <= maxBuildings) {
            this.setVisible(false);
            board.removeBuildingTiles(defender, selectedBuildings);
            board.initPlayPermCards();
        }
        else {
            attackCityAreaErrorGUI acaeGUI = new attackCityAreaErrorGUI();
            acaeGUI.setVisible(true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public void setupCityAreaGUI(String defender, int maxBuildings) {
        this.defender = defender;
        this.maxBuildings = maxBuildings;
        
        setTextInfo(this.maxBuildings);
        
        if(defender.compareTo("Norse") == 0) {
            Norse norsePlayer = Norse.getInstance();
            if(norsePlayer.getHouse() == 0) {
                HouseBox.setEnabled(false);
            }
            if(norsePlayer.isArmory() == false) {
                ArmoryBox.setEnabled(false);
            }
            if(norsePlayer.isGoldmint() == false) {
                GoldMintBox.setEnabled(false);
            }
            if(norsePlayer.isGranary() == false) {
                GranaryBox.setEnabled(false);
            }
            if(norsePlayer.isGreattemple() == false) {
                GreatTempleBox.setEnabled(false);
            }
            if(norsePlayer.isMarket() == false) {
                MarketBox.setEnabled(false);
            }
            if(norsePlayer.isMonument() == false) {
                MonumentBox.setEnabled(false);
            }
            if(norsePlayer.isQuarry() == false) {
                QuarryBox.setEnabled(false);
            }
            if(norsePlayer.isSiegeworkshop() == false) {
                SiegeEngineBox.setEnabled(false);
            }
            if(norsePlayer.isStorehouse() == false) {
                StorehouseBox.setEnabled(false);
            }
            if(norsePlayer.isTower() == false) {
                TowerBox.setEnabled(false);
            }
            if(norsePlayer.isWall() == false) {
                WallBox.setEnabled(false);
            }
            if(norsePlayer.isWonder() == false) {
                WonderBox.setEnabled(false);
            }
            if(norsePlayer.isWoodworkshop() == false) {
                WoodworkshopBox.setEnabled(false);
            }
        }
        else if(defender.compareTo("Greek") == 0) {
            Greek greekPlayer = Greek.getInstance();
            if(greekPlayer.getHouse() == 0) {
                HouseBox.setEnabled(false);
            }
            if(greekPlayer.isArmory() == false) {
                ArmoryBox.setEnabled(false);
            }
            if(greekPlayer.isGoldmint() == false) {
                GoldMintBox.setEnabled(false);
            }
            if(greekPlayer.isGranary() == false) {
                GranaryBox.setEnabled(false);
            }
            if(greekPlayer.isGreattemple() == false) {
                GreatTempleBox.setEnabled(false);
            }
            if(greekPlayer.isMarket() == false) {
                MarketBox.setEnabled(false);
            }
            if(greekPlayer.isMonument() == false) {
                MonumentBox.setEnabled(false);
            }
            if(greekPlayer.isQuarry() == false) {
                QuarryBox.setEnabled(false);
            }
            if(greekPlayer.isSiegeworkshop() == false) {
                SiegeEngineBox.setEnabled(false);
            }
            if(greekPlayer.isStorehouse() == false) {
                StorehouseBox.setEnabled(false);
            }
            if(greekPlayer.isTower() == false) {
                TowerBox.setEnabled(false);
            }
            if(greekPlayer.isWall() == false) {
                WallBox.setEnabled(false);
            }
            if(greekPlayer.isWonder() == false) {
                WonderBox.setEnabled(false);
            }
            if(greekPlayer.isWoodworkshop() == false) {
                WoodworkshopBox.setEnabled(false);
            }
        }
        else {
            Egyptian egyptianPlayer = Egyptian.getInstance();
            if(egyptianPlayer.getHouse() == 0) {
                HouseBox.setEnabled(false);
            }
            if(egyptianPlayer.isArmory() == false) {
                ArmoryBox.setEnabled(false);
            }
            if(egyptianPlayer.isGoldmint() == false) {
                GoldMintBox.setEnabled(false);
            }
            if(egyptianPlayer.isGranary() == false) {
                GranaryBox.setEnabled(false);
            }
            if(egyptianPlayer.isGreattemple() == false) {
                GreatTempleBox.setEnabled(false);
            }
            if(egyptianPlayer.isMarket() == false) {
                MarketBox.setEnabled(false);
            }
            if(egyptianPlayer.isMonument() == false) {
                MonumentBox.setEnabled(false);
            }
            if(egyptianPlayer.isQuarry() == false) {
                QuarryBox.setEnabled(false);
            }
            if(egyptianPlayer.isSiegeworkshop() == false) {
                SiegeEngineBox.setEnabled(false);
            }
            if(egyptianPlayer.isStorehouse() == false) {
                StorehouseBox.setEnabled(false);
            }
            if(egyptianPlayer.isTower() == false) {
                TowerBox.setEnabled(false);
            }
            if(egyptianPlayer.isWall() == false) {
                WallBox.setEnabled(false);
            }
            if(egyptianPlayer.isWonder() == false) {
                WonderBox.setEnabled(false);
            }
            if(egyptianPlayer.isWoodworkshop() == false) {
                WoodworkshopBox.setEnabled(false);
            }
        }
    }
    
    private void setTextInfo(int max) {
        jTextField1.setText("Select " + max + " building(s) to destroy:");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(attackCityAreaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(attackCityAreaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(attackCityAreaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(attackCityAreaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new attackCityAreaGUI().setVisible(true);
            }
        });
    }

    private int maxBuildings;
    private String defender;
    private BoardController board;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ArmoryBox;
    private javax.swing.JCheckBox GoldMintBox;
    private javax.swing.JCheckBox GranaryBox;
    private javax.swing.JCheckBox GreatTempleBox;
    private javax.swing.JCheckBox HouseBox;
    private javax.swing.JCheckBox MarketBox;
    private javax.swing.JCheckBox MonumentBox;
    private javax.swing.JCheckBox QuarryBox;
    private javax.swing.JCheckBox SiegeEngineBox;
    private javax.swing.JCheckBox StorehouseBox;
    private javax.swing.JCheckBox TowerBox;
    private javax.swing.JCheckBox WallBox;
    private javax.swing.JCheckBox WonderBox;
    private javax.swing.JCheckBox WoodworkshopBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
